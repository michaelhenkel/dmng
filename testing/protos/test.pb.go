// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package devicemanagertest

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Role int32

const (
	Role_LEAF  Role = 0
	Role_SPINE Role = 1
	Role_CRB   Role = 2
	Role_ERB   Role = 3
	Role_RR    Role = 4
)

var Role_name = map[int32]string{
	0: "LEAF",
	1: "SPINE",
	2: "CRB",
	3: "ERB",
	4: "RR",
}

var Role_value = map[string]int32{
	"LEAF":  0,
	"SPINE": 1,
	"CRB":   2,
	"ERB":   3,
	"RR":    4,
}

func (x Role) String() string {
	return proto.EnumName(Role_name, int32(x))
}

func (Role) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type BGPType int32

const (
	BGP_INTERNAL BGPType = 0
	BGP_EXTERNAL BGPType = 1
)

var BGPType_name = map[int32]string{
	0: "INTERNAL",
	1: "EXTERNAL",
}

var BGPType_value = map[string]int32{
	"INTERNAL": 0,
	"EXTERNAL": 1,
}

func (x BGPType) String() string {
	return proto.EnumName(BGPType_name, int32(x))
}

func (BGPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{7, 0}
}

type Result struct {
	Received             bool     `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	Applied              bool     `protobuf:"varint,2,opt,name=applied,proto3" json:"applied,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Success              bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

func (m *Result) GetApplied() bool {
	if m != nil {
		return m.Applied
	}
	return false
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Filter struct {
	Parent               *Interface `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetParent() *Interface {
	if m != nil {
		return m.Parent
	}
	return nil
}

type Device struct {
	Name                 string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Roles                []Role             `protobuf:"varint,2,rep,packed,name=roles,proto3,enum=devicemanagertest.Role" json:"roles,omitempty"`
	Interfaces           []*Interface       `protobuf:"bytes,3,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	RoutingInstances     []*RoutingInstance `protobuf:"bytes,4,rep,name=routingInstances,proto3" json:"routingInstances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetRoles() []Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Device) GetInterfaces() []*Interface {
	if m != nil {
		return m.Interfaces
	}
	return nil
}

func (m *Device) GetRoutingInstances() []*RoutingInstance {
	if m != nil {
		return m.RoutingInstances
	}
	return nil
}

// DM
type Interface struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4                 string     `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string     `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Parent               *Interface `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid                 string     `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Device               *Device    `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	Version              int32      `protobuf:"varint,7,opt,name=version,proto3" json:"version,omitempty"`
	VlanID               int32      `protobuf:"varint,8,opt,name=vlanID,proto3" json:"vlanID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}

func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Interface) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *Interface) GetParent() *Interface {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Interface) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Interface) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *Interface) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Interface) GetVlanID() int32 {
	if m != nil {
		return m.VlanID
	}
	return 0
}

type RoutingInstance struct {
	Id                   int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoutingProtocol      *RoutingProtocol `protobuf:"bytes,2,opt,name=routingProtocol,proto3" json:"routingProtocol,omitempty"`
	Name                 string           `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RoutingInstance) Reset()         { *m = RoutingInstance{} }
func (m *RoutingInstance) String() string { return proto.CompactTextString(m) }
func (*RoutingInstance) ProtoMessage()    {}
func (*RoutingInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{4}
}

func (m *RoutingInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingInstance.Unmarshal(m, b)
}
func (m *RoutingInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingInstance.Marshal(b, m, deterministic)
}
func (m *RoutingInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingInstance.Merge(m, src)
}
func (m *RoutingInstance) XXX_Size() int {
	return xxx_messageInfo_RoutingInstance.Size(m)
}
func (m *RoutingInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingInstance.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingInstance proto.InternalMessageInfo

func (m *RoutingInstance) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoutingInstance) GetRoutingProtocol() *RoutingProtocol {
	if m != nil {
		return m.RoutingProtocol
	}
	return nil
}

func (m *RoutingInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RoutingProtocol struct {
	// Types that are valid to be assigned to Protocol:
	//	*RoutingProtocol_Bgp
	//	*RoutingProtocol_Ospf
	Protocol             isRoutingProtocol_Protocol `protobuf_oneof:"Protocol"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *RoutingProtocol) Reset()         { *m = RoutingProtocol{} }
func (m *RoutingProtocol) String() string { return proto.CompactTextString(m) }
func (*RoutingProtocol) ProtoMessage()    {}
func (*RoutingProtocol) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{5}
}

func (m *RoutingProtocol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingProtocol.Unmarshal(m, b)
}
func (m *RoutingProtocol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingProtocol.Marshal(b, m, deterministic)
}
func (m *RoutingProtocol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingProtocol.Merge(m, src)
}
func (m *RoutingProtocol) XXX_Size() int {
	return xxx_messageInfo_RoutingProtocol.Size(m)
}
func (m *RoutingProtocol) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingProtocol.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingProtocol proto.InternalMessageInfo

type isRoutingProtocol_Protocol interface {
	isRoutingProtocol_Protocol()
}

type RoutingProtocol_Bgp struct {
	Bgp *BGP `protobuf:"bytes,1,opt,name=bgp,proto3,oneof"`
}

type RoutingProtocol_Ospf struct {
	Ospf *OSPF `protobuf:"bytes,2,opt,name=ospf,proto3,oneof"`
}

func (*RoutingProtocol_Bgp) isRoutingProtocol_Protocol() {}

func (*RoutingProtocol_Ospf) isRoutingProtocol_Protocol() {}

func (m *RoutingProtocol) GetProtocol() isRoutingProtocol_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (m *RoutingProtocol) GetBgp() *BGP {
	if x, ok := m.GetProtocol().(*RoutingProtocol_Bgp); ok {
		return x.Bgp
	}
	return nil
}

func (m *RoutingProtocol) GetOspf() *OSPF {
	if x, ok := m.GetProtocol().(*RoutingProtocol_Ospf); ok {
		return x.Ospf
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RoutingProtocol) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RoutingProtocol_Bgp)(nil),
		(*RoutingProtocol_Ospf)(nil),
	}
}

type RoutingOptions struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoutingOptions) Reset()         { *m = RoutingOptions{} }
func (m *RoutingOptions) String() string { return proto.CompactTextString(m) }
func (*RoutingOptions) ProtoMessage()    {}
func (*RoutingOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{6}
}

func (m *RoutingOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoutingOptions.Unmarshal(m, b)
}
func (m *RoutingOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoutingOptions.Marshal(b, m, deterministic)
}
func (m *RoutingOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoutingOptions.Merge(m, src)
}
func (m *RoutingOptions) XXX_Size() int {
	return xxx_messageInfo_RoutingOptions.Size(m)
}
func (m *RoutingOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_RoutingOptions.DiscardUnknown(m)
}

var xxx_messageInfo_RoutingOptions proto.InternalMessageInfo

type BGP struct {
	Asn                  int32      `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Source               *Interface `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BGP) Reset()         { *m = BGP{} }
func (m *BGP) String() string { return proto.CompactTextString(m) }
func (*BGP) ProtoMessage()    {}
func (*BGP) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{7}
}

func (m *BGP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGP.Unmarshal(m, b)
}
func (m *BGP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGP.Marshal(b, m, deterministic)
}
func (m *BGP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGP.Merge(m, src)
}
func (m *BGP) XXX_Size() int {
	return xxx_messageInfo_BGP.Size(m)
}
func (m *BGP) XXX_DiscardUnknown() {
	xxx_messageInfo_BGP.DiscardUnknown(m)
}

var xxx_messageInfo_BGP proto.InternalMessageInfo

func (m *BGP) GetAsn() int32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *BGP) GetSource() *Interface {
	if m != nil {
		return m.Source
	}
	return nil
}

type BGP_Peers struct {
	Address              []string `protobuf:"bytes,5,rep,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BGP_Peers) Reset()         { *m = BGP_Peers{} }
func (m *BGP_Peers) String() string { return proto.CompactTextString(m) }
func (*BGP_Peers) ProtoMessage()    {}
func (*BGP_Peers) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{7, 0}
}

func (m *BGP_Peers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BGP_Peers.Unmarshal(m, b)
}
func (m *BGP_Peers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BGP_Peers.Marshal(b, m, deterministic)
}
func (m *BGP_Peers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BGP_Peers.Merge(m, src)
}
func (m *BGP_Peers) XXX_Size() int {
	return xxx_messageInfo_BGP_Peers.Size(m)
}
func (m *BGP_Peers) XXX_DiscardUnknown() {
	xxx_messageInfo_BGP_Peers.DiscardUnknown(m)
}

var xxx_messageInfo_BGP_Peers proto.InternalMessageInfo

func (m *BGP_Peers) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type OSPF struct {
	Area                 int32    `protobuf:"varint,1,opt,name=area,proto3" json:"area,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OSPF) Reset()         { *m = OSPF{} }
func (m *OSPF) String() string { return proto.CompactTextString(m) }
func (*OSPF) ProtoMessage()    {}
func (*OSPF) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{8}
}

func (m *OSPF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OSPF.Unmarshal(m, b)
}
func (m *OSPF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OSPF.Marshal(b, m, deterministic)
}
func (m *OSPF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OSPF.Merge(m, src)
}
func (m *OSPF) XXX_Size() int {
	return xxx_messageInfo_OSPF.Size(m)
}
func (m *OSPF) XXX_DiscardUnknown() {
	xxx_messageInfo_OSPF.DiscardUnknown(m)
}

var xxx_messageInfo_OSPF proto.InternalMessageInfo

func (m *OSPF) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type Fabric struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Topology:
	//	*Fabric_Clos
	Topology             isFabric_Topology `protobuf_oneof:"topology"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Fabric) Reset()         { *m = Fabric{} }
func (m *Fabric) String() string { return proto.CompactTextString(m) }
func (*Fabric) ProtoMessage()    {}
func (*Fabric) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{9}
}

func (m *Fabric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Fabric.Unmarshal(m, b)
}
func (m *Fabric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Fabric.Marshal(b, m, deterministic)
}
func (m *Fabric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fabric.Merge(m, src)
}
func (m *Fabric) XXX_Size() int {
	return xxx_messageInfo_Fabric.Size(m)
}
func (m *Fabric) XXX_DiscardUnknown() {
	xxx_messageInfo_Fabric.DiscardUnknown(m)
}

var xxx_messageInfo_Fabric proto.InternalMessageInfo

func (m *Fabric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isFabric_Topology interface {
	isFabric_Topology()
}

type Fabric_Clos struct {
	Clos *CLOS `protobuf:"bytes,2,opt,name=clos,proto3,oneof"`
}

func (*Fabric_Clos) isFabric_Topology() {}

func (m *Fabric) GetTopology() isFabric_Topology {
	if m != nil {
		return m.Topology
	}
	return nil
}

func (m *Fabric) GetClos() *CLOS {
	if x, ok := m.GetTopology().(*Fabric_Clos); ok {
		return x.Clos
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Fabric) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Fabric_Clos)(nil),
	}
}

type CLOS struct {
	Leaves               []*Device `protobuf:"bytes,1,rep,name=leaves,proto3" json:"leaves,omitempty"`
	Spines               []*Device `protobuf:"bytes,2,rep,name=spines,proto3" json:"spines,omitempty"`
	AsnRangeStart        int32     `protobuf:"varint,3,opt,name=asnRangeStart,proto3" json:"asnRangeStart,omitempty"`
	AsnRangeEnd          int32     `protobuf:"varint,4,opt,name=asnRangeEnd,proto3" json:"asnRangeEnd,omitempty"`
	SubnetRangeStart     int32     `protobuf:"varint,5,opt,name=subnetRangeStart,proto3" json:"subnetRangeStart,omitempty"`
	SubnetRangeEnd       int32     `protobuf:"varint,6,opt,name=subnetRangeEnd,proto3" json:"subnetRangeEnd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CLOS) Reset()         { *m = CLOS{} }
func (m *CLOS) String() string { return proto.CompactTextString(m) }
func (*CLOS) ProtoMessage()    {}
func (*CLOS) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{10}
}

func (m *CLOS) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CLOS.Unmarshal(m, b)
}
func (m *CLOS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CLOS.Marshal(b, m, deterministic)
}
func (m *CLOS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CLOS.Merge(m, src)
}
func (m *CLOS) XXX_Size() int {
	return xxx_messageInfo_CLOS.Size(m)
}
func (m *CLOS) XXX_DiscardUnknown() {
	xxx_messageInfo_CLOS.DiscardUnknown(m)
}

var xxx_messageInfo_CLOS proto.InternalMessageInfo

func (m *CLOS) GetLeaves() []*Device {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func (m *CLOS) GetSpines() []*Device {
	if m != nil {
		return m.Spines
	}
	return nil
}

func (m *CLOS) GetAsnRangeStart() int32 {
	if m != nil {
		return m.AsnRangeStart
	}
	return 0
}

func (m *CLOS) GetAsnRangeEnd() int32 {
	if m != nil {
		return m.AsnRangeEnd
	}
	return 0
}

func (m *CLOS) GetSubnetRangeStart() int32 {
	if m != nil {
		return m.SubnetRangeStart
	}
	return 0
}

func (m *CLOS) GetSubnetRangeEnd() int32 {
	if m != nil {
		return m.SubnetRangeEnd
	}
	return 0
}

func init() {
	proto.RegisterEnum("devicemanagertest.Role", Role_name, Role_value)
	proto.RegisterEnum("devicemanagertest.BGPType", BGPType_name, BGPType_value)
	proto.RegisterType((*Result)(nil), "devicemanagertest.Result")
	proto.RegisterType((*Filter)(nil), "devicemanagertest.Filter")
	proto.RegisterType((*Device)(nil), "devicemanagertest.Device")
	proto.RegisterType((*Interface)(nil), "devicemanagertest.Interface")
	proto.RegisterType((*RoutingInstance)(nil), "devicemanagertest.RoutingInstance")
	proto.RegisterType((*RoutingProtocol)(nil), "devicemanagertest.RoutingProtocol")
	proto.RegisterType((*RoutingOptions)(nil), "devicemanagertest.RoutingOptions")
	proto.RegisterType((*BGP)(nil), "devicemanagertest.BGP")
	proto.RegisterType((*BGP_Peers)(nil), "devicemanagertest.BGP.Peers")
	proto.RegisterType((*OSPF)(nil), "devicemanagertest.OSPF")
	proto.RegisterType((*Fabric)(nil), "devicemanagertest.Fabric")
	proto.RegisterType((*CLOS)(nil), "devicemanagertest.CLOS")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x45, 0xf1, 0xc3, 0xd2, 0xd8, 0x96, 0xd9, 0x6d, 0x93, 0xb2, 0x42, 0x0f, 0x2a, 0x51,
	0x14, 0x82, 0x81, 0x18, 0xa9, 0x9b, 0xf6, 0x54, 0x14, 0x88, 0x6c, 0xc9, 0x51, 0xa0, 0xd8, 0xc2,
	0xba, 0x68, 0x53, 0xa0, 0x97, 0x35, 0x39, 0x11, 0x58, 0xd0, 0x24, 0xb1, 0xbb, 0x12, 0x9a, 0x73,
	0x2f, 0x7d, 0x80, 0x3e, 0x49, 0x81, 0x3e, 0x4c, 0x5f, 0xa4, 0xe7, 0x62, 0x77, 0x49, 0x59, 0x91,
	0x19, 0xc6, 0x80, 0x7d, 0x9b, 0xd9, 0xfd, 0xef, 0xcc, 0xf0, 0xb7, 0xb3, 0x23, 0x01, 0x48, 0x14,
	0xf2, 0xa8, 0xe0, 0xb9, 0xcc, 0xc9, 0x47, 0x31, 0xae, 0x92, 0x08, 0xaf, 0x59, 0xc6, 0x16, 0xc8,
	0xd5, 0x46, 0xf8, 0x1b, 0x78, 0x14, 0xc5, 0x32, 0x95, 0xa4, 0x0f, 0x1d, 0x8e, 0x11, 0x26, 0x2b,
	0x8c, 0x03, 0x6b, 0x60, 0x0d, 0x3b, 0x74, 0xed, 0x93, 0x00, 0x76, 0x58, 0x51, 0xa4, 0x09, 0xc6,
	0x41, 0x5b, 0x6f, 0x55, 0x2e, 0xf1, 0xc1, 0xbe, 0x16, 0x8b, 0xc0, 0x1e, 0x58, 0xc3, 0x2e, 0x55,
	0xa6, 0xd2, 0x8a, 0x65, 0x14, 0xa1, 0x10, 0x81, 0x63, 0xb4, 0xa5, 0x1b, 0xfe, 0x00, 0xde, 0x24,
	0x49, 0x25, 0x72, 0xf2, 0x0c, 0xbc, 0x82, 0x71, 0xcc, 0xa4, 0xce, 0xb4, 0x7b, 0xfc, 0xf9, 0xd1,
	0xad, 0xca, 0x8e, 0xa6, 0x99, 0x44, 0xfe, 0x86, 0x45, 0x48, 0x4b, 0x6d, 0xf8, 0xaf, 0x05, 0xde,
	0xa9, 0xd6, 0x11, 0x02, 0x4e, 0xc6, 0xae, 0x51, 0x1f, 0xef, 0x52, 0x6d, 0x93, 0x27, 0xe0, 0xf2,
	0x3c, 0x45, 0x11, 0xb4, 0x07, 0xf6, 0xb0, 0x77, 0xfc, 0x69, 0x4d, 0x4c, 0x9a, 0xa7, 0x48, 0x8d,
	0x8a, 0x7c, 0x0f, 0x90, 0x54, 0x29, 0x44, 0x60, 0x0f, 0xec, 0x0f, 0xd6, 0xb1, 0xa1, 0x27, 0xe7,
	0xe0, 0xf3, 0x7c, 0x29, 0x93, 0x6c, 0x31, 0xcd, 0x84, 0x64, 0x99, 0x8a, 0xe1, 0xe8, 0x18, 0x61,
	0x6d, 0xde, 0x77, 0xa4, 0xf4, 0xd6, 0xd9, 0xf0, 0x3f, 0x0b, 0xba, 0xeb, 0x4c, 0xb5, 0x9f, 0x47,
	0xc0, 0x49, 0x8a, 0xd5, 0x33, 0x7d, 0x01, 0x5d, 0xaa, 0xed, 0x72, 0xed, 0xbb, 0x12, 0xbf, 0xb6,
	0x37, 0xd8, 0x3a, 0x77, 0x67, 0xab, 0x22, 0x2d, 0x97, 0x49, 0x1c, 0xb8, 0x26, 0x92, 0xb2, 0xc9,
	0xd7, 0xe0, 0x99, 0xa3, 0x81, 0xa7, 0x23, 0x7d, 0x56, 0x13, 0xc9, 0xdc, 0x07, 0x2d, 0x85, 0xea,
	0xf2, 0x57, 0xc8, 0x45, 0x92, 0x67, 0xc1, 0xce, 0xc0, 0x1a, 0xba, 0xb4, 0x72, 0xc9, 0x63, 0xf0,
	0x56, 0x29, 0xcb, 0xa6, 0xa7, 0x41, 0x47, 0x6f, 0x94, 0x5e, 0xf8, 0x87, 0x05, 0x07, 0x5b, 0x78,
	0x48, 0x0f, 0xda, 0x89, 0x69, 0x42, 0x97, 0xb6, 0x93, 0x98, 0xcc, 0xe0, 0xa0, 0x04, 0x36, 0x57,
	0x7d, 0x1c, 0xe5, 0xa9, 0xa6, 0xd0, 0xc8, 0xba, 0x52, 0xd2, 0xed, 0xa3, 0x6b, 0xb8, 0xf6, 0x0d,
	0xdc, 0xf0, 0xf7, 0x75, 0x11, 0x6b, 0xd9, 0x21, 0xd8, 0x57, 0x8b, 0xa2, 0x6c, 0xd0, 0xc7, 0x35,
	0x89, 0x46, 0x67, 0xf3, 0x17, 0x2d, 0xaa, 0x44, 0xe4, 0x09, 0x38, 0xb9, 0x28, 0xde, 0x94, 0x55,
	0xd5, 0x75, 0xde, 0xc5, 0xe5, 0x7c, 0xf2, 0xa2, 0x45, 0xb5, 0x6c, 0x04, 0xd0, 0xa9, 0xd2, 0x84,
	0x3e, 0xf4, 0xca, 0xcc, 0x17, 0x85, 0x4c, 0xf2, 0x4c, 0x84, 0x7f, 0x59, 0x60, 0x8f, 0xce, 0xe6,
	0xea, 0x69, 0x31, 0x91, 0x95, 0x18, 0x94, 0xa9, 0xae, 0x56, 0xe4, 0x4b, 0x1e, 0xe1, 0xdd, 0xae,
	0xd6, 0x68, 0xfb, 0x5f, 0x80, 0x3b, 0x47, 0xe4, 0x42, 0xbf, 0xe2, 0x38, 0xe6, 0xea, 0x65, 0xba,
	0x03, 0x7b, 0xd8, 0xa5, 0x95, 0x1b, 0x86, 0xe0, 0xc8, 0xb7, 0x05, 0x92, 0x3d, 0xe8, 0x4c, 0xcf,
	0x7f, 0x1c, 0xd3, 0xf3, 0xe7, 0x33, 0xbf, 0xa5, 0xbc, 0xf1, 0xeb, 0xd2, 0xb3, 0xc2, 0x3e, 0x38,
	0xea, 0x23, 0x14, 0x3e, 0xc6, 0x91, 0x95, 0x75, 0x69, 0x3b, 0xfc, 0x19, 0xbc, 0x09, 0xbb, 0xe2,
	0x49, 0xf4, 0x9e, 0x87, 0xe9, 0x44, 0x69, 0x2e, 0x1a, 0xe8, 0x9c, 0xcc, 0x2e, 0x2e, 0x15, 0x1d,
	0x25, 0x53, 0x74, 0x64, 0x5e, 0xe4, 0x69, 0xbe, 0x78, 0x1b, 0xfe, 0xd9, 0x06, 0x47, 0x6d, 0xaa,
	0x5e, 0x4c, 0x91, 0xad, 0x50, 0x04, 0x96, 0x7e, 0x65, 0x4d, 0xbd, 0x68, 0x84, 0xea, 0x88, 0x28,
	0x92, 0xac, 0x1c, 0x08, 0xcd, 0x47, 0x8c, 0x90, 0x7c, 0x09, 0xfb, 0x4c, 0x64, 0x94, 0x65, 0x0b,
	0xbc, 0x94, 0x8c, 0x4b, 0xdd, 0x23, 0x2e, 0x7d, 0x77, 0x91, 0x0c, 0x60, 0xb7, 0x5a, 0x18, 0x67,
	0xb1, 0xbe, 0x0b, 0x97, 0x6e, 0x2e, 0x91, 0x43, 0xf0, 0xc5, 0xf2, 0x2a, 0x43, 0xb9, 0x11, 0xca,
	0xd5, 0xb2, 0x5b, 0xeb, 0xe4, 0x2b, 0xe8, 0x6d, 0xac, 0xa9, 0x80, 0x9e, 0x56, 0x6e, 0xad, 0x1e,
	0x7e, 0x0b, 0x8e, 0x1a, 0x5f, 0xa4, 0x03, 0xce, 0x6c, 0xfc, 0x7c, 0xe2, 0xb7, 0x48, 0x17, 0xdc,
	0xcb, 0xf9, 0xf4, 0x7c, 0xec, 0x5b, 0x64, 0x07, 0xec, 0x13, 0x3a, 0xf2, 0xdb, 0xca, 0x18, 0xd3,
	0x91, 0x6f, 0x13, 0x0f, 0xda, 0x94, 0xfa, 0xce, 0xf1, 0x3f, 0x2e, 0xec, 0x9b, 0xaf, 0x7c, 0x65,
	0xbe, 0x9b, 0xbc, 0x84, 0x7d, 0x8a, 0x2c, 0xbe, 0x99, 0x36, 0x8d, 0x6d, 0xd4, 0xaf, 0xc3, 0x66,
	0x7e, 0x32, 0xc2, 0x16, 0x79, 0x05, 0xbd, 0x59, 0x22, 0xe4, 0xf4, 0x66, 0x30, 0xd6, 0xc9, 0xcd,
	0xd4, 0xef, 0x37, 0xe6, 0x09, 0x5b, 0x4f, 0x2d, 0x32, 0x87, 0x83, 0x13, 0x8e, 0x4c, 0xe2, 0x43,
	0x14, 0x37, 0xb4, 0x9e, 0x5a, 0x6a, 0x74, 0x9c, 0x62, 0x8a, 0x0f, 0x13, 0x91, 0xfc, 0x04, 0x1f,
	0x2b, 0x74, 0xdb, 0xf3, 0xea, 0x0e, 0x23, 0xbf, 0x39, 0xee, 0x2f, 0xf0, 0x89, 0xc2, 0xb8, 0x75,
	0xa6, 0x11, 0xe6, 0x1d, 0x72, 0x6a, 0xa4, 0xbf, 0xc2, 0x23, 0x83, 0xf4, 0xa1, 0x8b, 0xd6, 0x78,
	0x5f, 0xc3, 0x23, 0x83, 0xf7, 0xa1, 0xa3, 0x1f, 0xff, 0xdd, 0x86, 0x7d, 0x33, 0x53, 0xaa, 0xbe,
	0x3d, 0x05, 0x50, 0xf0, 0xcb, 0x41, 0x53, 0x8b, 0x46, 0x6f, 0x35, 0xa3, 0x3e, 0x83, 0x5d, 0x85,
	0xda, 0x48, 0x1b, 0x09, 0xbf, 0x3f, 0x83, 0x06, 0xfb, 0x12, 0xf6, 0x0c, 0xd8, 0xfb, 0x15, 0xa4,
	0x31, 0x4e, 0x60, 0xcf, 0x60, 0xbc, 0x5f, 0xac, 0x2b, 0x4f, 0xff, 0xcf, 0xfb, 0xe6, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x03, 0x2e, 0x8e, 0x71, 0xf5, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceManagerClient is the client API for DeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceManagerClient interface {
	ReadInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error)
	ListInterfaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (DeviceManager_ListInterfacesClient, error)
	CreateInterface(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateInterfaceClient, error)
	DeleteInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error)
	ReadRoutingInstance(ctx context.Context, in *RoutingInstance, opts ...grpc.CallOption) (*Result, error)
	ListRoutingInstances(ctx context.Context, in *Filter, opts ...grpc.CallOption) (DeviceManager_ListRoutingInstancesClient, error)
	CreateRoutingInstance(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateRoutingInstanceClient, error)
	DeleteRoutingInstance(ctx context.Context, in *RoutingInstance, opts ...grpc.CallOption) (*Result, error)
}

type deviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewDeviceManagerClient(cc *grpc.ClientConn) DeviceManagerClient {
	return &deviceManagerClient{cc}
}

func (c *deviceManagerClient) ReadInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.DeviceManager/ReadInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) ListInterfaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (DeviceManager_ListInterfacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceManager_serviceDesc.Streams[0], "/devicemanagertest.DeviceManager/ListInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerListInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceManager_ListInterfacesClient interface {
	Recv() (*Interface, error)
	grpc.ClientStream
}

type deviceManagerListInterfacesClient struct {
	grpc.ClientStream
}

func (x *deviceManagerListInterfacesClient) Recv() (*Interface, error) {
	m := new(Interface)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) CreateInterface(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateInterfaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceManager_serviceDesc.Streams[1], "/devicemanagertest.DeviceManager/CreateInterface", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerCreateInterfaceClient{stream}
	return x, nil
}

type DeviceManager_CreateInterfaceClient interface {
	Send(*Interface) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type deviceManagerCreateInterfaceClient struct {
	grpc.ClientStream
}

func (x *deviceManagerCreateInterfaceClient) Send(m *Interface) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceManagerCreateInterfaceClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) DeleteInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.DeviceManager/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) ReadRoutingInstance(ctx context.Context, in *RoutingInstance, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.DeviceManager/ReadRoutingInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) ListRoutingInstances(ctx context.Context, in *Filter, opts ...grpc.CallOption) (DeviceManager_ListRoutingInstancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceManager_serviceDesc.Streams[2], "/devicemanagertest.DeviceManager/ListRoutingInstances", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerListRoutingInstancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceManager_ListRoutingInstancesClient interface {
	Recv() (*RoutingInstance, error)
	grpc.ClientStream
}

type deviceManagerListRoutingInstancesClient struct {
	grpc.ClientStream
}

func (x *deviceManagerListRoutingInstancesClient) Recv() (*RoutingInstance, error) {
	m := new(RoutingInstance)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) CreateRoutingInstance(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateRoutingInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceManager_serviceDesc.Streams[3], "/devicemanagertest.DeviceManager/CreateRoutingInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerCreateRoutingInstanceClient{stream}
	return x, nil
}

type DeviceManager_CreateRoutingInstanceClient interface {
	Send(*RoutingInstance) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type deviceManagerCreateRoutingInstanceClient struct {
	grpc.ClientStream
}

func (x *deviceManagerCreateRoutingInstanceClient) Send(m *RoutingInstance) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceManagerCreateRoutingInstanceClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) DeleteRoutingInstance(ctx context.Context, in *RoutingInstance, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.DeviceManager/DeleteRoutingInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagerServer is the server API for DeviceManager service.
type DeviceManagerServer interface {
	ReadInterface(context.Context, *Interface) (*Result, error)
	ListInterfaces(*Filter, DeviceManager_ListInterfacesServer) error
	CreateInterface(DeviceManager_CreateInterfaceServer) error
	DeleteInterface(context.Context, *Interface) (*Result, error)
	ReadRoutingInstance(context.Context, *RoutingInstance) (*Result, error)
	ListRoutingInstances(*Filter, DeviceManager_ListRoutingInstancesServer) error
	CreateRoutingInstance(DeviceManager_CreateRoutingInstanceServer) error
	DeleteRoutingInstance(context.Context, *RoutingInstance) (*Result, error)
}

// UnimplementedDeviceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceManagerServer struct {
}

func (*UnimplementedDeviceManagerServer) ReadInterface(ctx context.Context, req *Interface) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) ListInterfaces(req *Filter, srv DeviceManager_ListInterfacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (*UnimplementedDeviceManagerServer) CreateInterface(srv DeviceManager_CreateInterfaceServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) DeleteInterface(ctx context.Context, req *Interface) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) ReadRoutingInstance(ctx context.Context, req *RoutingInstance) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRoutingInstance not implemented")
}
func (*UnimplementedDeviceManagerServer) ListRoutingInstances(req *Filter, srv DeviceManager_ListRoutingInstancesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRoutingInstances not implemented")
}
func (*UnimplementedDeviceManagerServer) CreateRoutingInstance(srv DeviceManager_CreateRoutingInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateRoutingInstance not implemented")
}
func (*UnimplementedDeviceManagerServer) DeleteRoutingInstance(ctx context.Context, req *RoutingInstance) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingInstance not implemented")
}

func RegisterDeviceManagerServer(s *grpc.Server, srv DeviceManagerServer) {
	s.RegisterService(&_DeviceManager_serviceDesc, srv)
}

func _DeviceManager_ReadInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).ReadInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.DeviceManager/ReadInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).ReadInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_ListInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceManagerServer).ListInterfaces(m, &deviceManagerListInterfacesServer{stream})
}

type DeviceManager_ListInterfacesServer interface {
	Send(*Interface) error
	grpc.ServerStream
}

type deviceManagerListInterfacesServer struct {
	grpc.ServerStream
}

func (x *deviceManagerListInterfacesServer) Send(m *Interface) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceManager_CreateInterface_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceManagerServer).CreateInterface(&deviceManagerCreateInterfaceServer{stream})
}

type DeviceManager_CreateInterfaceServer interface {
	Send(*Result) error
	Recv() (*Interface, error)
	grpc.ServerStream
}

type deviceManagerCreateInterfaceServer struct {
	grpc.ServerStream
}

func (x *deviceManagerCreateInterfaceServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceManagerCreateInterfaceServer) Recv() (*Interface, error) {
	m := new(Interface)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceManager_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.DeviceManager/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_ReadRoutingInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).ReadRoutingInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.DeviceManager/ReadRoutingInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).ReadRoutingInstance(ctx, req.(*RoutingInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_ListRoutingInstances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceManagerServer).ListRoutingInstances(m, &deviceManagerListRoutingInstancesServer{stream})
}

type DeviceManager_ListRoutingInstancesServer interface {
	Send(*RoutingInstance) error
	grpc.ServerStream
}

type deviceManagerListRoutingInstancesServer struct {
	grpc.ServerStream
}

func (x *deviceManagerListRoutingInstancesServer) Send(m *RoutingInstance) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceManager_CreateRoutingInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceManagerServer).CreateRoutingInstance(&deviceManagerCreateRoutingInstanceServer{stream})
}

type DeviceManager_CreateRoutingInstanceServer interface {
	Send(*Result) error
	Recv() (*RoutingInstance, error)
	grpc.ServerStream
}

type deviceManagerCreateRoutingInstanceServer struct {
	grpc.ServerStream
}

func (x *deviceManagerCreateRoutingInstanceServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceManagerCreateRoutingInstanceServer) Recv() (*RoutingInstance, error) {
	m := new(RoutingInstance)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceManager_DeleteRoutingInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoutingInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteRoutingInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.DeviceManager/DeleteRoutingInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteRoutingInstance(ctx, req.(*RoutingInstance))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicemanagertest.DeviceManager",
	HandlerType: (*DeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadInterface",
			Handler:    _DeviceManager_ReadInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _DeviceManager_DeleteInterface_Handler,
		},
		{
			MethodName: "ReadRoutingInstance",
			Handler:    _DeviceManager_ReadRoutingInstance_Handler,
		},
		{
			MethodName: "DeleteRoutingInstance",
			Handler:    _DeviceManager_DeleteRoutingInstance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListInterfaces",
			Handler:       _DeviceManager_ListInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateInterface",
			Handler:       _DeviceManager_CreateInterface_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListRoutingInstances",
			Handler:       _DeviceManager_ListRoutingInstances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateRoutingInstance",
			Handler:       _DeviceManager_CreateRoutingInstance_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}

// FabricManagerClient is the client API for FabricManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FabricManagerClient interface {
	ReadFabric(ctx context.Context, in *Fabric, opts ...grpc.CallOption) (*Result, error)
	ListFabrics(ctx context.Context, in *Filter, opts ...grpc.CallOption) (FabricManager_ListFabricsClient, error)
	CreateFabric(ctx context.Context, opts ...grpc.CallOption) (FabricManager_CreateFabricClient, error)
	DeleteFabric(ctx context.Context, in *Fabric, opts ...grpc.CallOption) (*Result, error)
}

type fabricManagerClient struct {
	cc *grpc.ClientConn
}

func NewFabricManagerClient(cc *grpc.ClientConn) FabricManagerClient {
	return &fabricManagerClient{cc}
}

func (c *fabricManagerClient) ReadFabric(ctx context.Context, in *Fabric, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.FabricManager/ReadFabric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fabricManagerClient) ListFabrics(ctx context.Context, in *Filter, opts ...grpc.CallOption) (FabricManager_ListFabricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FabricManager_serviceDesc.Streams[0], "/devicemanagertest.FabricManager/ListFabrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &fabricManagerListFabricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FabricManager_ListFabricsClient interface {
	Recv() (*Fabric, error)
	grpc.ClientStream
}

type fabricManagerListFabricsClient struct {
	grpc.ClientStream
}

func (x *fabricManagerListFabricsClient) Recv() (*Fabric, error) {
	m := new(Fabric)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fabricManagerClient) CreateFabric(ctx context.Context, opts ...grpc.CallOption) (FabricManager_CreateFabricClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FabricManager_serviceDesc.Streams[1], "/devicemanagertest.FabricManager/CreateFabric", opts...)
	if err != nil {
		return nil, err
	}
	x := &fabricManagerCreateFabricClient{stream}
	return x, nil
}

type FabricManager_CreateFabricClient interface {
	Send(*Fabric) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type fabricManagerCreateFabricClient struct {
	grpc.ClientStream
}

func (x *fabricManagerCreateFabricClient) Send(m *Fabric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fabricManagerCreateFabricClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fabricManagerClient) DeleteFabric(ctx context.Context, in *Fabric, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanagertest.FabricManager/DeleteFabric", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FabricManagerServer is the server API for FabricManager service.
type FabricManagerServer interface {
	ReadFabric(context.Context, *Fabric) (*Result, error)
	ListFabrics(*Filter, FabricManager_ListFabricsServer) error
	CreateFabric(FabricManager_CreateFabricServer) error
	DeleteFabric(context.Context, *Fabric) (*Result, error)
}

// UnimplementedFabricManagerServer can be embedded to have forward compatible implementations.
type UnimplementedFabricManagerServer struct {
}

func (*UnimplementedFabricManagerServer) ReadFabric(ctx context.Context, req *Fabric) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFabric not implemented")
}
func (*UnimplementedFabricManagerServer) ListFabrics(req *Filter, srv FabricManager_ListFabricsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFabrics not implemented")
}
func (*UnimplementedFabricManagerServer) CreateFabric(srv FabricManager_CreateFabricServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFabric not implemented")
}
func (*UnimplementedFabricManagerServer) DeleteFabric(ctx context.Context, req *Fabric) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFabric not implemented")
}

func RegisterFabricManagerServer(s *grpc.Server, srv FabricManagerServer) {
	s.RegisterService(&_FabricManager_serviceDesc, srv)
}

func _FabricManager_ReadFabric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fabric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricManagerServer).ReadFabric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.FabricManager/ReadFabric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricManagerServer).ReadFabric(ctx, req.(*Fabric))
	}
	return interceptor(ctx, in, info, handler)
}

func _FabricManager_ListFabrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FabricManagerServer).ListFabrics(m, &fabricManagerListFabricsServer{stream})
}

type FabricManager_ListFabricsServer interface {
	Send(*Fabric) error
	grpc.ServerStream
}

type fabricManagerListFabricsServer struct {
	grpc.ServerStream
}

func (x *fabricManagerListFabricsServer) Send(m *Fabric) error {
	return x.ServerStream.SendMsg(m)
}

func _FabricManager_CreateFabric_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FabricManagerServer).CreateFabric(&fabricManagerCreateFabricServer{stream})
}

type FabricManager_CreateFabricServer interface {
	Send(*Result) error
	Recv() (*Fabric, error)
	grpc.ServerStream
}

type fabricManagerCreateFabricServer struct {
	grpc.ServerStream
}

func (x *fabricManagerCreateFabricServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fabricManagerCreateFabricServer) Recv() (*Fabric, error) {
	m := new(Fabric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FabricManager_DeleteFabric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fabric)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FabricManagerServer).DeleteFabric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanagertest.FabricManager/DeleteFabric",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FabricManagerServer).DeleteFabric(ctx, req.(*Fabric))
	}
	return interceptor(ctx, in, info, handler)
}

var _FabricManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicemanagertest.FabricManager",
	HandlerType: (*FabricManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadFabric",
			Handler:    _FabricManager_ReadFabric_Handler,
		},
		{
			MethodName: "DeleteFabric",
			Handler:    _FabricManager_DeleteFabric_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFabrics",
			Handler:       _FabricManager_ListFabrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateFabric",
			Handler:       _FabricManager_CreateFabric_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
