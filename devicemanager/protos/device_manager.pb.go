// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device_manager.proto

package protos

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Interface struct {
	Name                 string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4                 string     `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Ipv6                 string     `protobuf:"bytes,3,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Parent               *Interface `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Uuid                 string     `protobuf:"bytes,5,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Device               *Device    `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Interface) Reset()         { *m = Interface{} }
func (m *Interface) String() string { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()    {}
func (*Interface) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcbdd1ffbcbe4fbb, []int{0}
}

func (m *Interface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interface.Unmarshal(m, b)
}
func (m *Interface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interface.Marshal(b, m, deterministic)
}
func (m *Interface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interface.Merge(m, src)
}
func (m *Interface) XXX_Size() int {
	return xxx_messageInfo_Interface.Size(m)
}
func (m *Interface) XXX_DiscardUnknown() {
	xxx_messageInfo_Interface.DiscardUnknown(m)
}

var xxx_messageInfo_Interface proto.InternalMessageInfo

func (m *Interface) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Interface) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Interface) GetIpv6() string {
	if m != nil {
		return m.Ipv6
	}
	return ""
}

func (m *Interface) GetParent() *Interface {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *Interface) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Interface) GetDevice() *Device {
	if m != nil {
		return m.Device
	}
	return nil
}

type Device struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Uuid                 string   `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcbdd1ffbcbe4fbb, []int{1}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Result struct {
	Received             bool     `protobuf:"varint,1,opt,name=received,proto3" json:"received,omitempty"`
	Applied              bool     `protobuf:"varint,2,opt,name=applied,proto3" json:"applied,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Success              bool     `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcbdd1ffbcbe4fbb, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

func (m *Result) GetApplied() bool {
	if m != nil {
		return m.Applied
	}
	return false
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Filter struct {
	Parent               *Interface `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcbdd1ffbcbe4fbb, []int{3}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetParent() *Interface {
	if m != nil {
		return m.Parent
	}
	return nil
}

func init() {
	proto.RegisterType((*Interface)(nil), "devicemanager.Interface")
	proto.RegisterType((*Device)(nil), "devicemanager.Device")
	proto.RegisterType((*Result)(nil), "devicemanager.Result")
	proto.RegisterType((*Filter)(nil), "devicemanager.Filter")
}

func init() { proto.RegisterFile("device_manager.proto", fileDescriptor_bcbdd1ffbcbe4fbb) }

var fileDescriptor_bcbdd1ffbcbe4fbb = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xc5, 0x40, 0x5d, 0x33, 0x2d, 0xa5, 0x5a, 0xb5, 0xd2, 0xca, 0x27, 0xe4, 0x13, 0x97, 0xda,
	0x88, 0x22, 0x0e, 0x55, 0xd5, 0x03, 0xa0, 0xaa, 0x95, 0x92, 0xcb, 0x1e, 0x73, 0x89, 0x16, 0x7b,
	0x62, 0x36, 0xb1, 0x8d, 0xe5, 0x5d, 0xf3, 0x75, 0xf9, 0x9e, 0x7c, 0x47, 0xe4, 0x5d, 0x63, 0x02,
	0x02, 0x29, 0x82, 0x93, 0x67, 0x9e, 0xde, 0x7b, 0xf3, 0x66, 0x77, 0x0d, 0xdf, 0x22, 0xdc, 0x8a,
	0x10, 0xef, 0x53, 0x9e, 0xf1, 0x18, 0x0b, 0x3f, 0x2f, 0x36, 0x6a, 0x43, 0xfa, 0x06, 0xad, 0x41,
	0xef, 0xd9, 0x82, 0xde, 0xff, 0x4c, 0x61, 0xf1, 0xc0, 0x43, 0x24, 0x04, 0xba, 0x19, 0x4f, 0x91,
	0x5a, 0x43, 0x6b, 0xd4, 0x63, 0xba, 0xae, 0x30, 0x91, 0x6f, 0xa7, 0xb4, 0x6d, 0xb0, 0xaa, 0xae,
	0xb1, 0x19, 0xed, 0x34, 0xd8, 0x8c, 0x8c, 0xc1, 0xce, 0x79, 0x81, 0x99, 0xa2, 0xdd, 0xa1, 0x35,
	0xfa, 0x34, 0xa1, 0xfe, 0xc1, 0x24, 0xbf, 0x99, 0xc2, 0x6a, 0x5e, 0xe5, 0x52, 0x96, 0x22, 0xa2,
	0x1f, 0x8c, 0x4b, 0x55, 0x93, 0x1f, 0x60, 0x1b, 0x19, 0xb5, 0xb5, 0xcb, 0xf7, 0x23, 0x97, 0xa5,
	0xee, 0x58, 0x4d, 0xf2, 0xc6, 0x60, 0x1b, 0xe4, 0x5c, 0x74, 0x3d, 0xa0, 0xbd, 0x1f, 0xe0, 0x3d,
	0x82, 0xcd, 0x50, 0x96, 0x89, 0x22, 0x2e, 0x38, 0x05, 0x86, 0x28, 0xb6, 0x18, 0x69, 0x95, 0xc3,
	0x9a, 0x9e, 0x50, 0xf8, 0xc8, 0xf3, 0x3c, 0x11, 0x68, 0xc4, 0x0e, 0xdb, 0xb5, 0xe4, 0x2b, 0x74,
	0x52, 0x19, 0xd7, 0x9b, 0x57, 0x65, 0xc5, 0x95, 0x65, 0x18, 0xa2, 0x94, 0x7a, 0x73, 0x87, 0xed,
	0x5a, 0xef, 0x17, 0xd8, 0x7f, 0x45, 0xa2, 0xb0, 0x78, 0x73, 0x38, 0xd6, 0xfb, 0x0e, 0x67, 0xf2,
	0xd2, 0x81, 0xbe, 0x59, 0xed, 0xd6, 0x70, 0xc8, 0x1c, 0xfa, 0x0c, 0x79, 0xb4, 0xbf, 0xad, 0xb3,
	0x26, 0xee, 0xf1, 0xa9, 0x99, 0x8d, 0xbd, 0x16, 0x59, 0xc0, 0x97, 0x1b, 0x21, 0x55, 0xc3, 0x94,
	0xe4, 0x98, 0x6a, 0x02, 0xbb, 0x67, 0xbd, 0xbd, 0x16, 0xf9, 0x07, 0x83, 0x45, 0x81, 0x5c, 0xe1,
	0x35, 0x51, 0x46, 0xd6, 0xd8, 0x22, 0x4b, 0x18, 0x2c, 0x31, 0xc1, 0xeb, 0x9c, 0xc8, 0x1f, 0xf8,
	0x6c, 0xf2, 0xd4, 0x4f, 0xe1, 0xf4, 0x9b, 0x71, 0x4f, 0xc3, 0x46, 0x6f, 0x52, 0x5c, 0xa8, 0xff,
	0x0d, 0x50, 0x5d, 0xcc, 0x65, 0xea, 0xf9, 0xf4, 0x6e, 0x12, 0x0b, 0xb5, 0x2e, 0x57, 0x7e, 0xb8,
	0x49, 0x83, 0x54, 0x84, 0x6b, 0x8e, 0xc9, 0x1a, 0xb3, 0x27, 0x4c, 0x82, 0x28, 0xcd, 0xe2, 0xe0,
	0x40, 0x17, 0xe8, 0xbf, 0x58, 0xae, 0x6c, 0xfd, 0xfd, 0xf9, 0x1a, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0x61, 0x80, 0xfa, 0xe5, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceManagerClient is the client API for DeviceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceManagerClient interface {
	ReadInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error)
	ListInterfaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Interface, error)
	CreateInterface(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateInterfaceClient, error)
	DeleteInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error)
	CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
	DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
	ReadDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error)
}

type deviceManagerClient struct {
	cc *grpc.ClientConn
}

func NewDeviceManagerClient(cc *grpc.ClientConn) DeviceManagerClient {
	return &deviceManagerClient{cc}
}

func (c *deviceManagerClient) ReadInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/ReadInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) ListInterfaces(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/ListInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) CreateInterface(ctx context.Context, opts ...grpc.CallOption) (DeviceManager_CreateInterfaceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceManager_serviceDesc.Streams[0], "/devicemanager.DeviceManager/CreateInterface", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceManagerCreateInterfaceClient{stream}
	return x, nil
}

type DeviceManager_CreateInterfaceClient interface {
	Send(*Interface) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type deviceManagerCreateInterfaceClient struct {
	grpc.ClientStream
}

func (x *deviceManagerCreateInterfaceClient) Send(m *Interface) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deviceManagerCreateInterfaceClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceManagerClient) DeleteInterface(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) DeleteDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/DeleteDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerClient) ReadDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/devicemanager.DeviceManager/ReadDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagerServer is the server API for DeviceManager service.
type DeviceManagerServer interface {
	ReadInterface(context.Context, *Interface) (*Result, error)
	ListInterfaces(context.Context, *Filter) (*Interface, error)
	CreateInterface(DeviceManager_CreateInterfaceServer) error
	DeleteInterface(context.Context, *Interface) (*Result, error)
	CreateDevice(context.Context, *Device) (*Device, error)
	DeleteDevice(context.Context, *Device) (*Device, error)
	ReadDevice(context.Context, *Device) (*Device, error)
}

// UnimplementedDeviceManagerServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceManagerServer struct {
}

func (*UnimplementedDeviceManagerServer) ReadInterface(ctx context.Context, req *Interface) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) ListInterfaces(ctx context.Context, req *Filter) (*Interface, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaces not implemented")
}
func (*UnimplementedDeviceManagerServer) CreateInterface(srv DeviceManager_CreateInterfaceServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) DeleteInterface(ctx context.Context, req *Interface) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (*UnimplementedDeviceManagerServer) CreateDevice(ctx context.Context, req *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedDeviceManagerServer) DeleteDevice(ctx context.Context, req *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (*UnimplementedDeviceManagerServer) ReadDevice(ctx context.Context, req *Device) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDevice not implemented")
}

func RegisterDeviceManagerServer(s *grpc.Server, srv DeviceManagerServer) {
	s.RegisterService(&_DeviceManager_serviceDesc, srv)
}

func _DeviceManager_ReadInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).ReadInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/ReadInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).ReadInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_ListInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).ListInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/ListInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).ListInterfaces(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_CreateInterface_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeviceManagerServer).CreateInterface(&deviceManagerCreateInterfaceServer{stream})
}

type DeviceManager_CreateInterfaceServer interface {
	Send(*Result) error
	Recv() (*Interface, error)
	grpc.ServerStream
}

type deviceManagerCreateInterfaceServer struct {
	grpc.ServerStream
}

func (x *deviceManagerCreateInterfaceServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deviceManagerCreateInterfaceServer) Recv() (*Interface, error) {
	m := new(Interface)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DeviceManager_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteInterface(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).CreateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/DeleteDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).DeleteDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManager_ReadDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServer).ReadDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/devicemanager.DeviceManager/ReadDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServer).ReadDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "devicemanager.DeviceManager",
	HandlerType: (*DeviceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadInterface",
			Handler:    _DeviceManager_ReadInterface_Handler,
		},
		{
			MethodName: "ListInterfaces",
			Handler:    _DeviceManager_ListInterfaces_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _DeviceManager_DeleteInterface_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceManager_CreateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceManager_DeleteDevice_Handler,
		},
		{
			MethodName: "ReadDevice",
			Handler:    _DeviceManager_ReadDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateInterface",
			Handler:       _DeviceManager_CreateInterface_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "device_manager.proto",
}
